# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QStreamDockWidget
                                 A QGIS plugin
 QStream - Mesoscopic Traffic Simulation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-01-07
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Aurélien Clairais / CEREMA
        email                : aurelien.clairais@cerema.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import shutil
import numpy as np
from pyexcel_ods import save_data, get_data
import json

from qgis.utils import iface
from qgis.core import QgsProject, QgsWkbTypes, QgsFeature, QgsGeometry, QgsPointXY, QgsFeatureRequest, QgsExpression, QgsVectorLayer
from qgis.core.additions.edit import edit


from PyQt5 import QtGui, QtWidgets, uic
from PyQt5.QtCore import pyqtSignal, QCoreApplication, QSize


""" UTILITIES ! """
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Qstream_dockwidget_network.ui'))

BASE_DIR = os.path.dirname(__file__)
def absolutePath(relativePath):
    return os.path.join(BASE_DIR, relativePath)

def convertSecondsTohhmmss(time):
    hours = int(time/3600)
    minutes = int((time%3600)/60)
    seconds = time%60
    string = str(int(hours/10)) + str(hours%10) + "." + str(int(minutes/10)) + str(minutes%10) + "." + str(int(seconds/10)) + str(seconds%10)
    return string

def convertHHMMSStoSeconds(stringTime):
    seconds = int(stringTime[0])*36000 + int(stringTime[1])*3600 + int(stringTime[3])*600 +  int(stringTime[4])*60 +  int(stringTime[6])*10 +  int(stringTime[7])
    return seconds

""" Main Class """
class QStreamDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(QStreamDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        ### FOLDER
        self.currentFolder = 'test_folder'
        self.currentFile = 'testDB'


        # # #setup graphic

        self.setStyleSheet("""

            #dockWidgetContents{
                background-color : rgb(211,95,95);
            }

            #scrollAreaNetwork{
                background-color: rgb(255,255,255);
                border-style : none;
            }

            QTabBar::tab{
                font-weight : bold;
                font-size : 10pt;
                min-height: 100px;
            }

            QTabBar::tab:selected{
                background-color: rgb(255,255,255);
                color : rgb(211,95,95);
                font-size : 12pt;
                }
            QTabBar::tab:!selected{
                background: transparent;
                color : rgb(255,255,255);
                }

            QTabBar::tab:hover{
                font-size : 12pt;
            }

            QTabWidget::pane{
                background-color : rgb(255,255,255);
                border-style : none;
            }

            QToolButton{
                background-color: rgb(255,255,255);
                border-style : none;
            }

            """)

        # # # setup icons for Tool buttons # # #
        ## Netowk
        ### Configuration
        self.saveTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/save.png'))
        #↕self.saveTB.setMinimumSize(QSize(48, 48))
        self.saveTB.setIconSize(QSize(48, 48))
        self.importTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/load.png'))
        #self.importTB.setMinimumSize(QSize(48, 48))
        self.importTB.setIconSize(QSize(48, 48))
        self.newTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/new.png'))
        #self.newTB.setMinimumSize(QSize(48, 48))
        self.newTB.setIconSize(QSize(48, 48))


        ### Road Type
        self.roadType_TB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/roadType.png'))
        #self.roadType_TB.setMinimumSize(QSize(192, 48))
        self.roadType_TB.setIconSize(QSize(192, 48))

        ### Links Edition
        self.addLinkReverseTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/addReverse2.png'))
        #self.deleteLinkTB.setMinimumSize(QSize(192, 48))
        self.addLinkReverseTB.setIconSize(QSize(192, 48))
        self.addLinkTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/addLink.png'))
        #self.addLinkTB.setMinimumSize(QSize(192, 48))
        self.addLinkTB.setIconSize(QSize(192, 48))
        self.reverseLinkTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/reverseLink.png'))
        #self.reverseLinkTB.setMinimumSize(QSize(192, 48))
        self.reverseLinkTB.setIconSize(QSize(192, 48))

        ### Nodes edition
        self.mergeNodeTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/mergeNodes.png'))
        #self.mergeNodeTB.setMinimumSize(QSize(192, 48))
        self.mergeNodeTB.setIconSize(QSize(48, 48))
        self.splitNodeTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/splitNode.png'))
        #self.mergeNodeTB.setMinimumSize(QSize(192, 48))
        self.splitNodeTB.setIconSize(QSize(48, 48))
        self.deleteNodesTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/deleteNode.png'))
        #self.splitNodeTB.setMinimumSize(QSize(192, 48))
        self.deleteNodesTB.setIconSize(QSize(192, 48))
        self.addNodeTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/addNode.png'))
        #self.deleteNodeTB.setMinimumSize(QSize(192, 48))
        self.addNodeTB.setIconSize(QSize(192, 48))

        # Demand panel
        self.demandTemplateTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/createODmatrix.png'))
        self.demandTemplateTB.setIconSize(QSize(48,48))
        self.demandImportTB.setIcon(QtGui.QIcon(':/plugins/Qstream/icons/importODmatrix.png'))
        self.demandImportTB.setIconSize(QSize(48,48))

        # connect buttons to functions
        self.newTB.clicked.connect(self.newScenario)
        self.importTB.clicked.connect(self.loadScenario)
        self.saveTB.clicked.connect(self.stopEdition)
        self.addLinkTB.clicked.connect(self.addLink)
        self.addNodeTB.clicked.connect(self.generateNodes)
        self.reverseLinkTB.clicked.connect(self.reverseSelectedLinks)
        self.addLinkReverseTB.clicked.connect(self.addLinkReverse)
        self.mergeNodeTB.clicked.connect(self.mergeNodes)
        self.splitNodeTB.clicked.connect(self.splitNode)
        # demand panel
        self.demandTemplateTB.clicked.connect(self.generateEmptyDemand)
        self.demandImportTB.clicked.connect(self.importDemand)
        # TODO:
        self.roadType_TB.clicked.connect(self.deleteAllLinks)

        self.deleteNodesTB.clicked.connect(self.deleteAllNodes)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    """  Cleaning all layers  """
    def cleanAllLayers(self):
        mc = iface.mapCanvas()
        layers = []
        layers.extend(QgsProject.instance().mapLayersByName("Feux"))
        layers.extend(QgsProject.instance().mapLayersByName("Centroides"))
        layers.extend(QgsProject.instance().mapLayersByName("Noeuds"))
        layers.extend(QgsProject.instance().mapLayersByName("Demand"))
        layers.extend(QgsProject.instance().mapLayersByName("Liens"))
        layers.extend(QgsProject.instance().mapLayersByName("VehicleTypes"))
        layers.extend(QgsProject.instance().mapLayersByName("RoadTypes"))
        layers.extend(QgsProject.instance().mapLayersByName("Periods"))
        layers.extend(QgsProject.instance().mapLayersByName("General"))
        print(layers)

        QgsProject.instance().removeMapLayers([layer.id() for layer in layers])
        mc.refresh()

    """  Applay the basic style for all the layers  """
    def applyBasicStyle(self):
        layer = QgsProject.instance().mapLayersByName("Noeuds")[0]
        layer.loadNamedStyle(absolutePath("baseQstream/StyleDesNoeuds.qml"))

        layer = QgsProject.instance().mapLayersByName("Liens")[0]
        layer.loadNamedStyle(absolutePath("baseQstream/StyleDesLiens.qml"))

        layer = QgsProject.instance().mapLayersByName("Feux")[0]
        layer.loadNamedStyle(absolutePath("baseQstream/StyleDesFeux.qml"))


    def newScenario(self):
        ###### Get path to file
        gpkgPath , _ = QtWidgets.QFileDialog.getSaveFileName(self, "Save new GeoPackage as", "", "GeoPackage (*.gpkg)")
        self.workingFolder = os.path.dirname(gpkgPath)

        # ######FILE MANAGEMENT
        old_name = absolutePath('baseQstream/base.gpkg')
        shutil.copy(old_name, gpkgPath)

        # clean layers
        self.cleanAllLayers()

        ####### Open the layers and add them to the workspace
        uri = absolutePath(gpkgPath +"|layername=demand")
        layer = iface.addVectorLayer(uri, "Demand", "ogr")

        uri = absolutePath(gpkgPath +"|layername=VehicleTypes")
        layer = iface.addVectorLayer(uri, "VehicleTypes", "ogr")

        uri = absolutePath(gpkgPath +"|layername=RoadTypes")
        layer = iface.addVectorLayer(uri, "RoadTypes", "ogr")

        uri = absolutePath(gpkgPath +"|layername=Periods")
        layer = iface.addVectorLayer(uri, "Periods", "ogr")

        uri = absolutePath(gpkgPath +"|layername=Noeuds")
        layer = iface.addVectorLayer(uri, "Noeuds", "ogr")

        uri = absolutePath(gpkgPath +"|layername=Liens")
        layer = iface.addVectorLayer(uri, "Liens", "ogr")

        uri = absolutePath(gpkgPath +"|layername=Feux")
        layer = iface.addVectorLayer(uri, "Feux", "ogr")

        uri = absolutePath(gpkgPath +"|layername=General")
        layer = iface.addVectorLayer(uri, "General", "ogr")

        ####### Apply basic style
        self.applyBasicStyle()

    """ Load a scenario from a GeoPackage file """
    def loadScenario(self):
        """displays open file dialog to select bus track input file"""
        gpkgPath, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Select Scenario GeoPackage", "", "GeoPackage (*.gpkg)")
        self.workingFolder = os.path.dirname(gpkgPath)
        self.currentGpkg = gpkgPath
        if gpkgPath:
            """ delete all layers in project"""
            self.cleanAllLayers()

            """ open the GeoPackage layers"""
            uri = absolutePath(gpkgPath +"|layername=demand")
            layer = iface.addVectorLayer(uri, "Demand", "ogr")

            uri = absolutePath(gpkgPath +"|layername=VehicleTypes")
            layer = iface.addVectorLayer(uri, "VehicleTypes", "ogr")

            uri = absolutePath(gpkgPath +"|layername=RoadTypes")
            layer = iface.addVectorLayer(uri, "RoadTypes", "ogr")

            uri = absolutePath(gpkgPath +"|layername=Periods")
            layer = iface.addVectorLayer(uri, "Periods", "ogr")

            uri = absolutePath(gpkgPath +"|layername=Noeuds")
            layer = iface.addVectorLayer(uri, "Noeuds", "ogr")

            uri = absolutePath(gpkgPath +"|layername=Liens")
            layer = iface.addVectorLayer(uri, "Liens", "ogr")

            uri = absolutePath(gpkgPath +"|layername=Feux")
            layer = iface.addVectorLayer(uri, "Feux", "ogr")

            uri = absolutePath(gpkgPath +"|layername=General")
            layer = iface.addVectorLayer(uri, "General", "ogr")

            uri = absolutePath(gpkgPath +"|layername=Regulations")
            from qgis.core import QgsVectorLayer
            test = QgsVectorLayer(uri, "Regulations", "ogr")
            if not test.isValid():
                print("No regulations layer for the moment, maybe you should add one...")
            else:
                layer = iface.addVectorLayer(uri, "Regulations", "ogr")

            self.applyBasicStyle()

    def stopEdition(self):
        mc = iface.mapCanvas()
        # Asking to commit all changes
        save_msg = "Are you sure you want to commit all changes to the data base ?"
        reply = QtWidgets.QMessageBox.question(self, 'Message',
                         save_msg, QtWidgets.QMessageBox.Yes, QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            for layer in mc.layers():
                if layer.isEditable():
                    layer.commitChanges()
            return
        else:
            return

    def addLink(self):
        layer = QgsProject.instance().mapLayersByName("Liens")[0]
        iface.setActiveLayer(layer)
        layer.startEditing()
        iface.actionAddFeature().trigger()

    # Generate the nodes
    def generateNodes(self):
        # commit all
        self.stopEdition()
        #Loop over the links """
        try:
            linkLayer = QgsProject.instance().mapLayersByName("Liens")[0]
            nodeLayer = QgsProject.instance().mapLayersByName("Noeuds")[0]
        except IndexError:
            print("No link layer...")
            return
        # Delete all nodes
        with edit(nodeLayer):
                    listOfIds = [feat.id() for feat in nodeLayer.getFeatures()]
                    nodeLayer.deleteFeatures( listOfIds )
        # Loop on all the feratures to store the first points
        features = linkLayer.getFeatures()
        coords = np.zeros([2*linkLayer.featureCount() , 4])
        i = 0
        for feature in features:
            coords[i,0] = feature.id()
            coords[i,1] = 0
            geom = feature.geometry()
            geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
            if geom.type()==QgsWkbTypes.LineGeometry:
                if geomSingleType:
                    x = geom.asPolyline()
                    coords[i,2] = x[0][0]
                    coords[i,3] = x[0][1]
                else:
                    x = geom.asMultiPolyline()
                    coords[i,2] = x[0][0][0]
                    coords[i,3] = x[0][0][1]
            i+=1
        # Loop on all the features tp store the last points
        features = linkLayer.getFeatures()
        for feature in features:
            coords[i,0] = feature.id()
            coords[i,1] = 2
            geom = feature.geometry()
            geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
            if geom.type()==QgsWkbTypes.LineGeometry:
                if geomSingleType:
                    x = geom.asPolyline()
                    coords[i,2] = x[-1][0]
                    coords[i,3] = x[-1][1]
                else:
                    x = geom.asMultiPolyline()
                    coords[i,2] = x[0][-1][0]
                    coords[i,3] = x[0][-1][1]
            i+=1
        # Get the uniques coords to ensure that the nodes are not duplicated
        uniques = np.unique(coords[:,2:4], axis=0)
        # Generate the nodes
        with edit(nodeLayer):
            for i in range(len(uniques)):
                feat = QgsFeature(nodeLayer.fields())
                feat['fid'] = i+1
                feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(uniques[i,0], uniques[i,1])))
                (res, outFeats) = nodeLayer.dataProvider().addFeatures([feat])

        # Assign the nodes to the links
        features = nodeLayer.getFeatures()
        with edit(linkLayer):
            # Loop over the nodes
            count = 0
            for feature in features:
                X = feature.geometry().asPoint()[0]
                Y = feature.geometry().asPoint()[1]
                # get the lines in coords where the node appear
                lines = np.unique(np.where(coords[:,2:4]==[X,Y])[0])
                # get fids
                fidsAndPlaces = coords[lines, 0:2]
                fidsAndPlaces = fidsAndPlaces[fidsAndPlaces[:,0].argsort()]
                fids = list(fidsAndPlaces[:,0])
                # get places 0 = upstram / 2 = downstream
                places = list(fidsAndPlaces[:,1])
                # get Features corresponding to the fids
                linkFeats = linkLayer.getFeatures(QgsFeatureRequest().setFilterFids(fids))
                i = 0
                # Loop over the features
                for feat in linkFeats:
                    # if it is an upstream node
                    if places[i] == 0.:
                        linkLayer.dataProvider().changeAttributeValues({feat.id() : {4 : feature.id()}})
                    # if it is a downstream node
                    elif places[i] == 2.:
                        linkLayer.dataProvider().changeAttributeValues({feat.id() : {5 : feature.id()}})
                    else:
                        print('ERROR HERE / Search for E-001')
                    i += 1
        # Assign types
        with edit(nodeLayer):
            nodes = nodeLayer.getFeatures()
            for node in nodes:
                # Test if links has this node as upstream node
                expr = QgsExpression( "\"up_node\"='{}'".format( node.id() ) )
                features = linkLayer.getFeatures( QgsFeatureRequest( expr ) )
                # if it is empty
                if not features.nextFeature(QgsFeature()):
                    nodeLayer.dataProvider().changeAttributeValues({node.id() : {1 : 2}})
                    continue
                # Test if links has this node as downstream node
                expr = QgsExpression( "\"down_node\"='{}'".format( node.id() ) )
                features = linkLayer.getFeatures( QgsFeatureRequest( expr ) )
                # if it is empty
                if not features.nextFeature(QgsFeature()):
                    nodeLayer.dataProvider().changeAttributeValues({node.id() : {1 : 1}})
                    continue
                nodeLayer.dataProvider().changeAttributeValues({node.id() : {1 : 0}})


    # Reverse the selected link
    def reverseSelectedLinks(self):
        try:
            layer = QgsProject.instance().mapLayersByName("Liens")[0]
        except IndexError:
            print("No link layer...")
            return

        with edit(layer):
            features = layer.selectedFeatures()
            for feature in features:
                geom = feature.geometry()
                geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
                if geom.type()==QgsWkbTypes.LineGeometry:
                    if geomSingleType:
                        #TODO
                        print("Dev Notes : maybe useless here but if you see it in the console, this case has to be handled")
                    else:
                        x = geom.asMultiPolyline()
                        x[0].reverse()
                        newgeom = QgsGeometry.fromMultiPolylineXY(x)
                        layer.changeGeometry(feature.id(),newgeom)

    def addLinkReverse(self):
        offset = 5
        #Loop over the links """
        try:
            layer = QgsProject.instance().mapLayersByName("Liens")[0]
        except IndexError:
            print("No link layer...")

        with edit(layer):
            features = layer.selectedFeatures()
            for feature in features:
                print("Feature ID: ", feature.id())
                geom = feature.geometry()
                geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
                if geom.type()==QgsWkbTypes.LineGeometry:
                    if geomSingleType:
                        print("Dev Notes : maybe useless here but if you see it in the console, this case has to be handled")

                    else:
                        x = geom.asMultiPolyline()
                        newPoints = []
                        # first point
                        X = x[0][0][0] + offset*(x[0][0][1]-x[0][1][1])/((x[0][1][0]-x[0][0][0])**2 + (x[0][1][1]-x[0][0][1])**2)**0.5
                        Y = x[0][0][1] + offset*(x[0][1][0]-x[0][0][0])/((x[0][1][0]-x[0][0][0])**2 + (x[0][1][1]-x[0][0][1])**2)**0.5
                        newPoints.append(QgsPointXY(X,Y))
                        #last point
                        N = len(x[0]) - 1
                        for i in range(1,N):
                            x1 = x[0][i][0] + offset*(x[0][i-1][1]-x[0][i][1])/((x[0][i][0]-x[0][i-1][0])**2 + (x[0][i][1]-x[0][i-1][1])**2)**0.5
                            y1 = x[0][i][1] + offset*(x[0][i][0]-x[0][i-1][0])/((x[0][i][0]-x[0][i-1][0])**2 + (x[0][i][1]-x[0][i-1][1])**2)**0.5
                            x2 = x[0][i][0] + offset*(x[0][i][1]-x[0][i+1][1])/((x[0][i+1][0]-x[0][i][0])**2 + (x[0][i+1][1]-x[0][i][1])**2)**0.5
                            y2 = x[0][i][1] + offset*(x[0][i+1][0]-x[0][i][0])/((x[0][i+1][0]-x[0][i][0])**2 + (x[0][i+1][1]-x[0][i][1])**2)**0.5
                            X = (x1 + x2)/2
                            Y = (y1 + y2)/2
                            # TODO !! Faire quand Etienne sera parti
                            newPoints.append(QgsPointXY(X,Y))
                        #last point
                        X = x[0][N][0] + offset*(x[0][N-1][1]-x[0][N][1])/((x[0][N][0]-x[0][N-1][0])**2 + (x[0][N][1]-x[0][N-1][1])**2)**0.5
                        Y = x[0][N][1] + offset*(x[0][N][0]-x[0][N-1][0])/((x[0][N][0]-x[0][N-1][0])**2 + (x[0][N][1]-x[0][N-1][1])**2)**0.5
                        newPoints.append(QgsPointXY(X,Y))
                        # reverse
                        newPoints.reverse()
                        newgeom = QgsGeometry.fromMultiPolylineXY([newPoints])
                        feat = QgsFeature(layer.fields())
                        feat.setGeometry(newgeom)
                        (res, outFeats) = layer.dataProvider().addFeatures([feat])

    def mergeNodes(self):
        #Loop over the links """
        try:
            nodesLayer = QgsProject.instance().mapLayersByName("Noeuds")[0]
            linksLayer = QgsProject.instance().mapLayersByName("Liens")[0]
        except IndexError:
            print("No link layer...")

        with edit(nodesLayer):
            features = nodesLayer.selectedFeatures()
            if features:
                n = 0
                xData = []
                yData = []
                delIDs = []
                for feature in features:
                    n += 1
                    geom = feature.geometry().asPoint()
                    delIDs.append(feature.id())
                    xData.append(geom[0])
                    yData.append(geom[1])
                xBar = sum(xData)/n
                yBar = sum(yData)/n
                newGeom = QgsGeometry.fromPointXY(QgsPointXY(xBar,yBar))
                newFeat = QgsFeature(nodesLayer.fields())
                newFeat["type"] = 0
                newFeat.setGeometry(newGeom)
                (res, outFeats) = nodesLayer.dataProvider().addFeatures([newFeat])
                newID = outFeats[0].id()
                nodesLayer.deleteFeatures(delIDs)

        # Modification of the links layer
        with edit(linksLayer):
            # Loop over all the IDS of the deleted nodes
            for id in delIDs:
                # Catch the links that have this node in UpNode
                expr = QgsExpression( "\"up_node\"='{}'".format( id ) )
                features = linksLayer.getFeatures( QgsFeatureRequest( expr ) )
                # Loop over the links selected
                for feature in features:
                    # modify the up_node to the newID
                    linksLayer.dataProvider().changeAttributeValues({feature.id() : {4 : newID}})
                # Catch the links that haver this node in DownNode
                expr = QgsExpression( "\"down_node\"='{}'".format( id ) )
                features = linksLayer.getFeatures( QgsFeatureRequest( expr ) )
                # Loop over the links selected
                for feature in features:
                    # modify the down_node to the newID
                    linksLayer.dataProvider().changeAttributeValues({feature.id() : {5 : newID}})

    def splitNode(self):
        #Loop over the links """
        try:
            nodesLayer = QgsProject.instance().mapLayersByName("Noeuds")[0]
            linksLayer = QgsProject.instance().mapLayersByName("Liens")[0]
        except IndexError:
            print("No link layer...")

        # Deleting the nodes
        with edit(nodesLayer):
            features = nodesLayer.selectedFeatures()
            if features:
                delIDs = []
                for feature in features:
                    delIDs.append(feature.id())
                # delete the features
                nodesLayer.deleteFeatures(delIDs)

        # Adding the new nodes
        with edit(nodesLayer):
            data = []
            for nodeID in delIDs:
                # Catch the links with that node in up_node
                expr = QgsExpression( "\"up_node\"='{}'".format( nodeID ) )
                features = linksLayer.getFeatures( QgsFeatureRequest( expr ) )
                for feature in features:
                    point = feature.geometry().asMultiPolyline()[0][0]
                    newFeat = QgsFeature(nodesLayer.fields())
                    newFeat.setGeometry(QgsGeometry.fromPointXY(point))
                    newFeat["type"] = 1
                    (res, outFeat) = nodesLayer.dataProvider().addFeatures([newFeat])
                    data.append([feature.id(), outFeat[0].id(), 1])
                # Catch the links with that node in up_node
                expr = QgsExpression( "\"down_node\"='{}'".format( nodeID ) )
                features = linksLayer.getFeatures( QgsFeatureRequest( expr ) )
                for feature in features:
                    point = feature.geometry().asMultiPolyline()[0][-1]
                    newFeat = QgsFeature(nodesLayer.fields())
                    newFeat.setGeometry(QgsGeometry.fromPointXY(point))
                    newFeat["type"] = 2
                    (res, outFeat) = nodesLayer.dataProvider().addFeatures([newFeat])
                    data.append([feature.id(), outFeat[0].id(), 2])

        # Assigning the new nodes to the corresponding links
        with edit(linksLayer):
            for line in data:
                if line[2] == 1:
                    linksLayer.dataProvider().changeAttributeValues({line[0]:{4 : line[1]}})
                else:
                    linksLayer.dataProvider().changeAttributeValues({line[0]:{5 : line[1]}})


    def generateEmptyDemand(self):
        # get layers
        try:
            nodeLayer = QgsProject.instance().mapLayersByName("Noeuds")[0]
            vTypeLayer =  QgsProject.instance().mapLayersByName("VehicleTypes")[0]
            periodsLayer = QgsProject.instance().mapLayersByName("Periods")[0]
            generalLayer = QgsProject.instance().mapLayersByName("General")[0]
        except IndexError:
            print("No layers")
            return

        # edit the period layer to take into account the generalLayer
        # Delete all periods
        with edit(periodsLayer):
                    listOfIds = [feat.id() for feat in periodsLayer.getFeatures()]
                    periodsLayer.deleteFeatures( listOfIds )

        with edit(periodsLayer):
            start = float(generalLayer.getFeature(1).attribute(2))
            end = float(generalLayer.getFeature(2).attribute(2))
            period = float(generalLayer.getFeature(3).attribute(2))
            count = 1
            newFeats = []
            currTime = start
            while currTime < end + period:
                newFeat = QgsFeature(periodsLayer.fields())
                newFeat["fid"] = count
                newFeat["start"] = start + period*(count-1)
                newFeats.append(newFeat)
                currTime += period
                count += 1
            periodsLayer.dataProvider().addFeatures(newFeats)

        folder = os.path.dirname( unicode( nodeLayer.dataProvider().dataSourceUri() ) )
        #TODO
        periodFeats = [feat for feat in periodsLayer.getFeatures()]
        if len(periodFeats)==0:
            #TODO 6h to 11h with 30min duration
            start = 0
            period = 15*60
            nb_periods = 4
        elif len(periodFeats)==1:
            # TODO: start at start during 1h with 30 minutes
            start = periodFeats[0]['start']
            period = 15*60
            nb_periods = 4
        else:
            start = periodFeats[0]['start']
            period = periodFeats[1]['start'] - start
            nb_periods = len(periodFeats)

        template = []
        data = {}

        # Destination
        firstLine = ['']
        N = 0
        expr = QgsExpression( "\"type\"='{}'".format( 2 ) )
        nodes = nodeLayer.getFeatures( QgsFeatureRequest( expr ) )
        for node in nodes:
            N+=1
            if node['name']:
                firstLine.append(node['name'])
            else:
                firstLine.append('fid_' + str(node.id()))
        template.append(firstLine)

        # Origins
        expr = QgsExpression( "\"type\"='{}'".format( 1 ) )
        nodes = nodeLayer.getFeatures( QgsFeatureRequest( expr ) )
        for node in nodes:
            if node['name']:
                line = [node['name']]
            else:
                line = ['fid_' + str(node.id())]
            line.extend(N*[0.0])
            template.append(line)

        # Write
        vtypes = vTypeLayer.getFeatures()
        for vtype in vtypes:
            for j in range(nb_periods):
                data.update({vtype['name'] + ' ' + convertSecondsTohhmmss(start+j*period) : template})

        save_data(os.path.join(folder,'OD_matrix.ods'),data)

    ## Import demand
    def importDemand(self):
        try:
            periodsLayer = QgsProject.instance().mapLayersByName("Periods")[0]
            demandLayer = QgsProject.instance().mapLayersByName("Demand")[0]
            vTypesLayer = QgsProject.instance().mapLayersByName("VehicleTypes")[0]
            nodesLayer = QgsProject.instance().mapLayersByName("Noeuds")[0]
        except IndexError:
            print("No Layers")

        """displays open file dialog to select bus track input file"""
        file, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Select Demand ODS File", "", "GeoPackage (*.ods)")
        data = json.loads(json.dumps(get_data(file)))

        # delete everything in periods and Demand
        with edit(periodsLayer):
                # delete all periods features
                listOfIds = [feat.id() for feat in periodsLayer.getFeatures()]
                periodsLayer.deleteFeatures( listOfIds )
        with edit(demandLayer):
                # delete all periods features
                listOfIds = [feat.id() for feat in demandLayer.getFeatures()]
                demandLayer.deleteFeatures( listOfIds )

        # Sheets
        vehicleTypes = []
        periodsString = []
        for key in list(data.keys()):
            if not key.split(' ')[0] in vehicleTypes:
                vehicleTypes.append(key.split(' ')[0])
            if not key.split(' ')[1] in periodsString:
                periodsString.append(key.split(' ')[1])
        with edit(periodsLayer):
            for i in range(len(periodsString)):
                feat = QgsFeature(periodsLayer.fields())
                feat['fid'] = i+1
                feat['start'] = convertHHMMSStoSeconds(periodsString[i])
                (res, outFeats) = periodsLayer.dataProvider().addFeatures([feat])

        with edit(demandLayer):
            feat = QgsFeature()
            newFeats = []
            for sheet in data:
                lines = data[sheet]
                # Get vehicle type id
                expr = QgsExpression( "\"name\"='{}'".format( sheet.split(' ')[0] ) )
                vTypesLayer.getFeatures( QgsFeatureRequest( expr ) ).nextFeature(feat)
                vTypeID = feat.id()
                # Get period id
                expr = QgsExpression( "\"start\"='{}'".format(convertHHMMSStoSeconds(sheet.split(' ')[1] ) ))
                periodsLayer.getFeatures( QgsFeatureRequest( expr ) ).nextFeature(feat)
                periodID = feat.id()
                ##### ADVANCEMENT
                total = len(vehicleTypes)*len(periodsString)*(len(lines)-1)*(len(lines[0])-1)
                # for each cell
                for i in range(1,len(lines)):
                    for j in range(1,len(lines[0])):
                        # lines[i][j] is the value of flow from origin lines[i][0]
                        # to destination lines[0][j]
                        # Get origin feature id
                        nodeNameCalc = lines[i][0]
                        if nodesLayer.getFeatures(QgsFeatureRequest(QgsExpression("\"name\"='{}'".format(nodeNameCalc)))).nextFeature(feat):
                            originID = feat.id()
                        else:
                            originID = int(nodeNameCalc.split('_')[1])
                        # Get destination feature id
                        nodeNameCalc = lines[0][j]
                        if nodesLayer.getFeatures(QgsFeatureRequest(QgsExpression("\"name\"='{}'".format(nodeNameCalc)))).nextFeature(feat):
                            destinationID = feat.id()
                        else:
                            destinationID = int(nodeNameCalc.split('_')[1])
                        # Create new feature of demands
                        newFeat = QgsFeature(demandLayer.fields())
                        newFeat['origin'] = originID
                        newFeat['destination'] = destinationID
                        newFeat['vehicle_type'] = vTypeID
                        newFeat['period'] = periodID
                        newFeat['flow'] = lines[i][j]
                        newFeats.append(newFeat)
            (res, outFeats) = demandLayer.dataProvider().addFeatures(newFeats)


    """ DEV FUNCTION !!!!! """
    # TODO here !!!!!
    def deleteAllNodes(self):
        # select the layer of nodes
        try:
            layer = QgsProject.instance().mapLayersByName("Noeuds")[0]
        except IndexError:
            print("No link layer...")
            return

        # check if the layer is in edit mode
        if layer.isEditable():
            self.stopEdition()

        with edit(layer):
            listOfIds = [feat.id() for feat in layer.getFeatures()]
            layer.deleteFeatures( listOfIds )

    def deleteAllLinks(self):
        # select the layer of nodes
        try:
            layer = QgsProject.instance().mapLayersByName("Liens")[0]
        except IndexError:
            print("No link layer...")
            return

        # check if the layer is in edit mode
        if layer.isEditable():
            self.stopEdition()

        with edit(layer):
            listOfIds = [feat.id() for feat in layer.getFeatures()]
            layer.deleteFeatures( listOfIds )
